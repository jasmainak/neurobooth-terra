
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_postgres.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_postgres.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_postgres.py:


=============================================
Create Postgres table using Neurobooth-terra.
=============================================

This example demonstrates how to create postgres table with neurobooth-terra.

.. GENERATED FROM PYTHON SOURCE LINES 8-11

.. code-block:: default


    # Authors: Mainak Jas <mjas@harvard.mgh.edu>








.. GENERATED FROM PYTHON SOURCE LINES 12-13

Let us first import the necessary functions.

.. GENERATED FROM PYTHON SOURCE LINES 13-19

.. code-block:: default


    from neurobooth_terra import create_table, drop_table, Table

    import psycopg2
    import pandas as pd








.. GENERATED FROM PYTHON SOURCE LINES 20-21

Then, we will create a connection using ``psycopg2``.

.. GENERATED FROM PYTHON SOURCE LINES 21-27

.. code-block:: default

    connect_str = ("dbname='neurobooth' user='neuroboother' host='localhost' "
                   "password='neuroboothrocks'")

    conn = psycopg2.connect(connect_str)
    cursor = conn.cursor()








.. GENERATED FROM PYTHON SOURCE LINES 28-31

We will drop tables if they already exist
this is just for convenience so we can re-run this script
even when changing some columns

.. GENERATED FROM PYTHON SOURCE LINES 31-35

.. code-block:: default

    drop_table(conn, cursor, 'subject')
    drop_table(conn, cursor, 'contact')
    drop_table(conn, cursor, 'consent')








.. GENERATED FROM PYTHON SOURCE LINES 36-37

Now we define the Table

.. GENERATED FROM PYTHON SOURCE LINES 37-42

.. code-block:: default

    table_id = 'subject'
    table_subject = create_table(conn, cursor, table_id,
                                 ['subject_id', 'first_name_birth', 'last_name_birth'],
                                 ['VARCHAR (255)', 'VARCHAR (255)', 'VARCHAR (255)'])








.. GENERATED FROM PYTHON SOURCE LINES 43-44

and insert some data and retrieve the table as a dataframe

.. GENERATED FROM PYTHON SOURCE LINES 44-49

.. code-block:: default

    table_subject.insert_rows([('x5dc', 'mainak', 'jas'),
                               ('y5d3', 'anoopum', 'gupta')])
    df_subject = table_subject.query(f'SELECT * FROM "{table_id}";')
    print(df_subject)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

               first_name_birth last_name_birth
    subject_id                                 
    x5dc                 mainak             jas
    y5d3                anoopum           gupta




.. GENERATED FROM PYTHON SOURCE LINES 50-52

If we know a table already exists and we want to make modifications to it,
we can create a Table object first.

.. GENERATED FROM PYTHON SOURCE LINES 52-55

.. code-block:: default

    table_subject = Table(conn, cursor, table_id)
    print(table_subject)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Table "subject" (subject_id, first_name_birth, last_name_birth)




.. GENERATED FROM PYTHON SOURCE LINES 56-57

Then, we can make changes such as adding a new column

.. GENERATED FROM PYTHON SOURCE LINES 57-61

.. code-block:: default

    table_subject.add_column('dob', 'VARCHAR (255)')
    df_subject = table_subject.query(f'SELECT * FROM "{table_id}";')
    print(df_subject)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

               first_name_birth last_name_birth   dob
    subject_id                                       
    x5dc                 mainak             jas  None
    y5d3                anoopum           gupta  None




.. GENERATED FROM PYTHON SOURCE LINES 62-64

We can create another table and relate it to the other table using
a foreign key

.. GENERATED FROM PYTHON SOURCE LINES 64-73

.. code-block:: default

    table_id = 'contact'
    table = create_table(conn, cursor, table_id,
                         column_names=['subject_id', 'email'],
                         dtypes=['VARCHAR (255)', 'VARCHAR (255)'],
                         foreign_key=dict(subject_id='subject'))
    table.insert_rows([('x5dc',), ('y5d3',)], ['subject_id'])
    df_contact = table.query(f'SELECT * FROM "{table_id}";')
    print(df_contact)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

               email
    subject_id      
    x5dc        None
    y5d3        None




.. GENERATED FROM PYTHON SOURCE LINES 74-75

Finally, we can also delete rows in our table

.. GENERATED FROM PYTHON SOURCE LINES 75-79

.. code-block:: default

    table.delete_row(condition="subject_id = 'x5dc'")
    df_contact = table.query(f'SELECT * FROM "{table_id}";')
    print(df_contact)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

               email
    subject_id      
    y5d3        None




.. GENERATED FROM PYTHON SOURCE LINES 80-81

Don't forget to close the connection once done!

.. GENERATED FROM PYTHON SOURCE LINES 81-83

.. code-block:: default

    cursor.close()
    conn.close()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.538 seconds)


.. _sphx_glr_download_auto_examples_plot_postgres.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_postgres.py <plot_postgres.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_postgres.ipynb <plot_postgres.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
